[{"content":"通过SQL Server Profiler截获SQL语句\rSQL Server Profiler 是微软官方提供的强大数据库监控工具，可以实时捕获 SQL Server 的各种事件，包括 SQL 语句、存储过程、性能瓶颈等。本文将介绍如何使用 Profiler 截获 SQL 语句，并结合实际场景给出操作步骤。\n1. Profiler简介\rSQL Server Profiler 可用于：\n捕获和分析 SQL Server 执行的所有 SQL 语句 监控慢查询、锁等待、死锁等性能问题 审计数据库访问和操作 追踪应用程序与数据库的交互过程 2. 启动 SQL Server Profiler\r打开 SQL Server Management Studio (SSMS) 在菜单栏选择【工具】-\u0026gt;【SQL Server Profiler】 连接到目标 SQL Server 实例 3. 创建跟踪（Trace）\r新建跟踪后，选择合适的模板（如“标准”或“TSQL_Replay”） 在“事件选择”页，勾选如下关键事件： SQL:BatchStarting / SQL:BatchCompleted：捕approved SQL 语句 RPC:Completed：捕获存储过程调用 Showplan XML：分析执行计划 可通过“列过滤器”设置数据库、应用名、登录名等过滤条件，精准定位目标语句 4. 实时捕获 SQL 语句\r启动跟踪后，Profiler 会实时显示所有捕获到的 SQL 语句 可通过“文本数据”列查看完整 SQL 内容 支持暂停、停止、保存跟踪结果为文件或表，便于后续分析 ![](Pasted image 20250904103302.png) 5. 常见应用场景\r性能优化：定位慢查询，分析 SQL 执行计划 故障排查：捕获异常 SQL，追踪死锁、锁等待 安全审计：记录敏感操作，追踪数据变更 开发调试：分析应用与数据库交互，定位参数传递问题 6. 注意事项\r跟踪期间会对数据库性能有一定影响，建议在测试环境或低峰期操作 合理设置过滤条件，避免捕获过多无关数据 跟踪结果可导出为 .trc 文件，使用 Profiler 或 T-SQL 进一步分析 7. 总结\rSQL Server Profiler 是数据库开发和运维不可或缺的利器。通过合理配置和使用，可以高效定位 SQL 问题、优化性能、提升数据库安全性。\n参考：官方文档\n","date":"2025-09-01T00:00:00Z","image":"http://localhost:1313/1.jpg","permalink":"http://localhost:1313/p/sqlserver/2025-09-01/","title":"通过SQL Server Profiler截获SQL语句"},{"content":"MySQL复杂表结构的行转列实战\r经常会遇到需要将复杂表结构的数据进行行转列（Pivot）的需求，尤其是在报表统计、数据透视等场景下。我们可以通过临时表、动态SQL等方式把复杂问题简单化，实现灵活的行转列。\n1. 问题背景\r假设我们有一个项目工时表 project_time，记录了每个员工在不同项目、不同日期的工时。表结构如下：\nproject_time：项目工时明细（包含项目ID、员工ID、日期、工时等） project：项目信息 department：部门信息 employee：员工信息 我们的目标是：\n以项目为主轴，统计每个员工在每一天的工时（即员工为列，日期为动态列，工时为值）。 2. 数据准备与临时表构建\r首先，为了简化后续操作，将多表关联后的结果存入临时表：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 -- 删除临时表（如果存在） DROP TEMPORARY TABLE IF EXISTS temp_project_time; -- 创建临时表 CREATE TEMPORARY TABLE temp_project_time AS SELECT pt.project_id, p.organization_id, d.`name` AS department_name, p.`code` AS project_code, p.`name` AS project_name, p.start_date, p.end_date, e.`name` AS employee_name, pt.work_date, pt.work_hour FROM project_time AS pt LEFT JOIN project AS p ON pt.project_id = p.id LEFT JOIN department d ON p.department_id = d.id LEFT JOIN employee e ON pt.employee_id = e.id WHERE 1=1 AND (p_start_date IS NULL OR pt.work_date \u0026gt;= p_start_date) AND (p_end_date IS NULL OR pt.work_date \u0026lt;= p_end_date) AND (p_employee_id IS NULL OR p_employee_id = 0 OR pt.employee_id = p_employee_id) AND (p_project_id IS NULL OR p_project_id = 0 OR pt.project_id = p_project_id) AND (p_department_id IS NULL OR p_department_id = 0 OR p.department_id = p_department_id) AND (p_search_key IS NULL OR p_search_key = \u0026#39;\u0026#39; OR p.`code` LIKE CONCAT(\u0026#39;%\u0026#39;, p_search_key, \u0026#39;%\u0026#39;) COLLATE utf8_general_ci OR p.`name` LIKE CONCAT(\u0026#39;%\u0026#39;, p_search_key, \u0026#39;%\u0026#39;) COLLATE UTF8_GENERAL_CI ) GROUP BY pt.project_id, p.organization_id, d.`name`, p.`code`, p.`name`, p.start_date, p.end_date, e.`name`, pt.work_date, pt.work_hour ORDER BY pt.work_date DESC, pt.project_id DESC; 3. 静态行转列（CASE WHEN）\r如果日期是固定，可以直接用条件聚合：\n1 2 3 4 5 6 7 8 9 10 SELECT project_id, project_name, work_date, SUM(CASE WHEN work_date = \u0026#39;2025-01-01\u0026#39; THEN work_hour ELSE 0 END) AS \u0026#39;2025-01-01\u0026#39;, SUM(CASE WHEN work_date = \u0026#39;2025-01-02\u0026#39; THEN work_hour ELSE 0 END) AS \u0026#39;2025-01-02\u0026#39;, SUM(CASE WHEN work_date = \u0026#39;2025-01-03\u0026#39; THEN work_hour ELSE 0 END) AS \u0026#39;2025-01-03\u0026#39; FROM temp_project_time GROUP BY project_id, project_name, work_date ORDER BY work_date DESC, project_id DESC; 4. 动态行转列（动态SQL）\r实际业务中，员工数量和日期往往不固定，需要动态生成列。可通过MySQL动态SQL实现：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 BEGIN DECLARE done INT DEFAULT FALSE; DECLARE v_sql TEXT DEFAULT \u0026#39;\u0026#39;; -- 删除临时表（如果存在） DROP TEMPORARY TABLE IF EXISTS temp_project_time; -- 创建临时表 CREATE TEMPORARY TABLE temp_project_time AS ... -- 见上文 -- 生成动态日期列 SET @EE = \u0026#39;\u0026#39;; SELECT GROUP_CONCAT( CONCAT(\u0026#39;sum(if(work_date=\\\u0026#39;\u0026#39;, work_date, \u0026#39;\\\u0026#39;,work_hour,0)) as `\u0026#39;, work_date, \u0026#39;`\u0026#39;) ORDER BY work_date SEPARATOR \u0026#39;, \u0026#39; ) INTO @EE FROM ( SELECT DISTINCT DATE_FORMAT(work_date, \u0026#39;%Y-%m-%d\u0026#39;) AS work_date FROM temp_project_time ORDER BY work_date ) AS date_list; IF @EE IS NULL OR @EE = \u0026#39;\u0026#39; THEN SET @EE = \u0026#39;0 AS no_data\u0026#39;; END IF; -- 构建最终查询SQL SET @QQ = CONCAT( \u0026#39;SELECT \u0026#39;, \u0026#39; project_id, \u0026#39;, \u0026#39; organization_id, \u0026#39;, \u0026#39; department_name, \u0026#39;, \u0026#39; project_code, \u0026#39;, \u0026#39; project_name, \u0026#39;, \u0026#39; start_date, \u0026#39;, \u0026#39; end_date, \u0026#39;, \u0026#39; employee_name, \u0026#39;, @EE, \u0026#39;, \u0026#39;, \u0026#39; sum(work_hour) AS TOTAL \u0026#39;, \u0026#39;FROM temp_project_time \u0026#39;, \u0026#39;GROUP BY \u0026#39;, \u0026#39; project_id, \u0026#39;, \u0026#39; organization_id, \u0026#39;, \u0026#39; department_name, \u0026#39;, \u0026#39; project_code, \u0026#39;, \u0026#39; project_name, \u0026#39;, \u0026#39; start_date, \u0026#39;, \u0026#39; end_date, \u0026#39;, \u0026#39; employee_name \u0026#39;, \u0026#39;ORDER BY employee_name desc,project_id desc\u0026#39; ); PREPARE stmt FROM @QQ; EXECUTE stmt; DEALLOCATE PREPARE stmt; DROP TEMPORARY TABLE IF EXISTS temp_project_time; END 关键点说明\r通过 GROUP_CONCAT 动态拼接所有日期列，自动适配不同时间段。 动态SQL拼接后用 PREPARE 和 EXECUTE 执行。 支持任意员工、任意日期的灵活行转列。 5. 总结\r通过临时表和动态SQL，可以优雅地解决复杂表结构下的行转列需求。实际应用中可根据业务灵活调整分组和列生成逻辑，极大提升报表开发效率。\n然后可以考虑结合存储过程进一步封装。\n","date":"2025-08-31T00:00:00Z","image":"http://localhost:1313/p/mysql/2025-08-31/3_hu_2307260c751d0e0b.jpg","permalink":"http://localhost:1313/p/mysql/2025-08-31/","title":"MySQL复杂表结构的行转列实战"},{"content":"C# 动态表达式的运算与实战\r在实际开发中，动态表达式的运算能力极大提升了C#的灵活性，尤其在规则引擎、报表、动态查询等场景下尤为常见。本文将介绍C#动态表达式的常用实现方式、主流库、效率对比及典型应用。\n1. 动态表达式的应用场景\r动态查询：如根据用户输入拼接Where条件。 规则引擎：业务规则可配置，运行时动态解析。 报表与公式计算：支持自定义公式、字段运算。 2. 主要实现方式与效率对比\r2.1 编译代码方式\r通过动态生成C#代码并编译执行表达式，适合表达式不频繁变化的场景。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 using Microsoft.CSharp; using System.CodeDom.Compiler; string expression = \u0026#34;a \u0026gt; b \u0026amp;\u0026amp; c \u0026lt; d\u0026#34;; if (!expression.Trim().StartsWith(\u0026#34;return\u0026#34;)) expression = \u0026#34;return \u0026#34; + expression + \u0026#34;;\u0026#34;; string className = \u0026#34;Expression\u0026#34;; string methodName = \u0026#34;Compute\u0026#34;; string source = $\u0026#34;using System;sealed class {className}{{public object {methodName}(){{{expression}}}}}\u0026#34;; CompilerParameters options = new CompilerParameters { GenerateInMemory = true, GenerateExecutable = false }; CompilerResults cr = new CSharpCodeProvider().CompileAssemblyFromSource(options, source); object instance = cr.CompiledAssembly.CreateInstance(className); var method = instance.GetType().GetMethod(methodName); var result = method.Invoke(instance, null); 优点：支持复杂表达式，灵活性高。 缺点：每次都需编译，效率较低（200-300ms），适合缓存或预编译。 2.2 自定义表达式解析器\r自己实现表达式解析和运算，灵活但开发成本高，适合特殊需求。\n2.3 使用第三方表达式计算库\rExpressionEvaluator\r使用方便，支持字符串表达式直接计算。 示例： 1 2 3 var express = \u0026#34;(1 + 2) \u0026gt; 4\u0026#34;; var expression = new CompiledExpression(express); var result = expression.Eval(); 优点：简单易用，速度较快。 缺点：部分库已不维护，复杂表达式支持有限。 Z.Expressions.Eval\r性能优秀，支持多种参数传递方式。 示例： 1 2 3 4 5 6 7 8 9 10 11 12 using Z.Expressions; int result = Eval.Execute\u0026lt;int\u0026gt;(\u0026#34;X + Y\u0026#34;, new { X = 1, Y = 2 }); // 位置参数 result = Eval.Execute\u0026lt;int\u0026gt;(\u0026#34;{0} + {1}\u0026#34;, 1, 2); // 动态对象 dynamic expandoObject = new ExpandoObject(); expandoObject.X = 1; expandoObject.Y = 2; result = Eval.Execute\u0026lt;int\u0026gt;(\u0026#34;X + Y\u0026#34;, expandoObject); // 字典参数 var values = new Dictionary\u0026lt;string, object\u0026gt;() { { \u0026#34;X\u0026#34;, 1 }, { \u0026#34;Y\u0026#34;, 2 } }; result = Eval.Execute\u0026lt;int\u0026gt;(\u0026#34;X + Y\u0026#34;, values); 优点：速度快，功能强大，支持多种数据源。 缺点：首次执行略慢，后续极快。 Dynamic LINQ\r适合动态查询，字符串表达式转为LINQ。 示例： 1 2 3 using System.Linq.Dynamic.Core; var list = new List\u0026lt;int\u0026gt; {1, 5, 10, 20}; var result = list.AsQueryable().Where(\u0026#34;it \u0026gt; 5\u0026#34;).ToList(); Roslyn脚本引擎\r支持完整C#脚本动态编译与执行，适合复杂表达式。 示例： 1 2 using Microsoft.CodeAnalysis.CSharp.Scripting; var result = await CSharpScript.EvaluateAsync\u0026lt;int\u0026gt;(\u0026#34;1 + 2 * 3\u0026#34;); 3. 性能与安全注意事项\r表达式树和Z.Expressions.Eval性能较高，适合频繁调用。 动态编译和Roslyn功能强大但需注意沙箱和安全隔离。 动态表达式涉及用户输入时，务必做好校验防止注入风险。 4. 总结\rC#动态表达式为业务开发带来极大灵活性。可根据场景选择动态编译、第三方库、Dynamic LINQ或Roslyn等方案，提升代码扩展性和可维护性。 ![[image.png]]\n参考：动态执行用户输入表达式的策略与效率对比-CSDN博客\n","date":"2025-08-24T00:00:00Z","image":"http://localhost:1313/p/net/2025-08-24/2_hu_e95a4276bf860a84.jpg","permalink":"http://localhost:1313/p/net/2025-08-24/","title":"C#动态表达式的运算与实战"},{"content":"git相比其他团队协同工具具有高度灵活性，这造成一个不同的人对于使用git的方法方式的不同。如果不规定团队人员如何使用git，git的用法就无法保证一致，特别是新团队成员加入团队时，团队协同中就是一场灾难。\n而我们需要做的找到git的主流协同工作流，根据主流协同工作流做成配置上的取舍，约定自己团队的git使用方法，从而保证git的使用一致性。\n其实大部分时候无脑选择主流模式，就能解决大部分问题，又能减少新成员的学习成本。\n主流Git协同工作流综述\r1. Git Flow 2. GitHub Flow 3. GitLab Flow 4. 选择建议与团队实践 5. 参考资料 1. Git Flow\r简介：由Vincent Driessen提出，适合有发布周期、版本管理需求的团队。\n分支模型：\n主分支（master/main） 开发分支（develop） 功能分支（feature） 预发布分支（release） 修复分支（hotfix） 流程简述：\n所有新功能从develop分支拉feature分支开发，开发完成合并回develop。 发布前从develop拉release分支，测试通过后合并到master和develop。 线上紧急修复从master拉hotfix，修复后合并回master和develop。 优点：流程清晰，适合大型项目和多人协作。\n缺点：分支多，操作复杂，小团队或持续交付场景下略显繁琐。\n2. GitHub Flow\r简介：GitHub官方推荐，适合持续交付、敏捷开发。\n分支模型：\n主分支（main/master） 功能分支（feature/bugfix） 流程简述：\n从main拉分支开发新功能或修复bug。 完成后提交Pull Request（PR），经代码评审后合并到main。 main分支始终可部署。 优点：简单高效，适合小团队、持续集成。\n缺点：不适合复杂发布流程或多版本并行。\n3. GitLab Flow\r简介：结合Git Flow和GitHub Flow，强调与CI/CD、环境部署结合。\n分支模型：\n主分支 环境分支（如production、staging） 功能分支 流程简述：\n功能开发从主分支拉分支，开发完成合并。 通过CI/CD自动部署到不同环境分支。 优点：灵活，适合有多环境部署需求的团队。\n缺点：需要配合自动化工具，配置略复杂。\n4. 选择建议与团队实践\r小型团队/持续交付：优先GitHub Flow，简单高效。 有严格版本管理/多版本维护：优先Git Flow。 有多环境部署/自动化需求：可选GitLab Flow。 团队应根据实际业务、协作规模和交付方式选择合适工作流，并形成书面规范。 小结：主流工作流各有侧重，选型时建议结合团队规模、交付节奏和自动化水平综合考量。\n5. 参考资料\rA successful Git branching model GitHub Flow官方文档 GitLab Flow官方文档 ","date":"2025-08-14T00:00:00Z","image":"http://localhost:1313/p/tools/2025-08-14/1_hu_c1ca39d792aee4ab.jpg","permalink":"http://localhost:1313/p/tools/2025-08-14/","title":"Git的主流的协同工作流"},{"content":"正文测试\r而这些并不是完全重要，更加重要的问题是， 带着这些问题，我们来审视一下学生会退会。 既然如何， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 我们不得不面对一个非常尴尬的事实，那就是， 可是，即使是这样，学生会退会的出现仍然代表了一定的意义。 学生会退会，发生了会如何，不发生又会如何。 经过上述讨论， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 学生会退会，到底应该如何实现。 这样看来， 在这种困难的抉择下，本人思来想去，寝食难安。 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 就我个人来说，学生会退会对我的意义，不能不说非常重大。 莎士比亚曾经提到过，人的一生是短的，但如果卑劣地过这一生，就太长了。这似乎解答了我的疑惑。 莫扎特说过一句富有哲理的话，谁和我一样用功，谁就会和我一样成功。这启发了我， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 学生会退会，到底应该如何实现。 一般来说， 从这个角度来看， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 在这种困难的抉择下，本人思来想去，寝食难安。 了解清楚学生会退会到底是一种怎么样的存在，是解决一切问题的关键。 一般来说， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 问题的关键究竟为何？ 而这些并不是完全重要，更加重要的问题是。\n奥斯特洛夫斯基曾经说过，共同的事业，共同的斗争，可以使人们产生忍受一切的力量。　带着这句话，我们还要更加慎重的审视这个问题： 一般来讲，我们都必须务必慎重的考虑考虑。 既然如此， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 带着这些问题，我们来审视一下学生会退会。 我认为， 我认为， 在这种困难的抉择下，本人思来想去，寝食难安。 问题的关键究竟为何？ 每个人都不得不面对这些问题。 在面对这种问题时， 要想清楚，学生会退会，到底是一种怎么样的存在。 我认为， 既然如此， 每个人都不得不面对这些问题。 在面对这种问题时， 那么， 我认为， 学生会退会因何而发生。\n引用\r思念是最暖的忧伤像一双翅膀\n让我停不了飞不远在过往游荡\n不告而别的你 就算为了我着想\n这么沉痛的呵护 我怎么能翱翔\n最暖的憂傷 - 田馥甄\n图片\r1 2 3 ![Photo by Florian Klauer on Unsplash](florian-klauer-nptLmg6jqDo-unsplash.jpg) ![Photo by Luca Bravo on Unsplash](luca-bravo-alS7ewQ41M8-unsplash.jpg) ![Photo by Helena Hertz on Unsplash](helena-hertz-wWZzXlDpMog-unsplash.jpg) ![Photo by Hudai Gayiran on Unsplash](hudai-gayiran-3Od_VKcDEAA-unsplash.jpg) 相册语法来自 Typlog\n","date":"2020-09-09T00:00:00Z","image":"http://localhost:1313/p/test-chinese/helena-hertz-wWZzXlDpMog-unsplash_hu_2307260c751d0e0b.jpg","permalink":"http://localhost:1313/p/test-chinese/","title":"Chinese Test"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings\rThe following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1\rH2\rH3\rH4\rH5\rH6\rParagraph\rXerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes\rThe blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution\rTiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution\rDon\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables\rTables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables\rItalics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien Code Blocks\rCode block with backticks\r1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces\r\u0026lt;!doctype html\u0026gt;\r\u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt;\r\u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\rCode block with Hugo\u0026rsquo;s internal highlight shortcode\r1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Diff code block\r1 2 3 4 5 [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] List Types\rOrdered List\rFirst item Second item Third item Unordered List\rList item Another item And another item Nested list\rFruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark\rGIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL + ALT + Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image\rThe above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2019-03-11T00:00:00Z","image":"http://localhost:1313/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hu_e95a4276bf860a84.jpg","permalink":"http://localhost:1313/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"},{"content":"Lorem est tota propiore conpellat pectoribus de pectora summo.\nRedit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\nExierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.\nComas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et Vagus elidunt\rThe Van de Graaf Canon\nMane refeci capiebant unda mulcebat\rVicta caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides parte.\n","date":"2019-03-09T00:00:00Z","image":"http://localhost:1313/p/placeholder-text/matt-le-SJSpo9hQf7s-unsplash_hu_c1ca39d792aee4ab.jpg","permalink":"http://localhost:1313/p/placeholder-text/","title":"Placeholder Text"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\nCreate a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so: 1 2 3 {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }} To enable KaTeX globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTeX on a per page basis include the parameter math: true in content files Note: Use the online reference of Supported TeX Functions\nExamples\rInline math: $\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…$\nBlock math: $$\r\\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$","date":"2019-03-08T00:00:00Z","permalink":"http://localhost:1313/p/math-typesetting/","title":"Math Typesetting"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site\u0026rsquo;s configuration and then you can type emoji shorthand codes directly in content files; e.g.\n🙈 :see_no_evil: 🙉 :hear_no_evil: 🙊 :speak_no_evil:\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n1 2 3 .emoji { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; } ","date":"2019-03-05T00:00:00Z","image":"http://localhost:1313/p/emoji-support/the-creative-exchange-d2zvqp3fpro-unsplash_hu_27b8954607cdb515.jpg","permalink":"http://localhost:1313/p/emoji-support/","title":"Emoji Support"},{"content":"","date":"0001-01-01T00:00:00Z","permalink":"http://localhost:1313/p/","title":""}]